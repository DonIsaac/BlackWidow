#!/usr/bin/env ruby
# frozen_string_literal: true

# BlackWidow
# by Donald Isaac (https://www.opensourceryumd.com)
# Copyright (c) 2019 Open Sourcery. See LICENSE for license details.

require 'pathname'
require 'getoptlong'
require 'black-widow'

# Base command usage message
USAGE = {}
HELP = {}

# Usage messages

USAGE[:base] = <<-EOF
usage: black-widow [--help] [--version] command
EOF

USAGE[:generate] = <<-EOF
usage: black-widow generate [--help] <component> [--name <name>]
EOF

USAGE[:new] = <<-EOF
usage: black-widow new [--help] --name <name>
EOF

USAGE[:render] = <<-EOF
usage: black-widow render [--help] <root-dir>
EOF

# Help messages

HELP[:base] = <<-EOF
usage: black-widow [--help] [--version] <command>

Options:
	-h, --help			Display this help message
	-v, --version		Display BlackWidow's version

Available commands:
	new					Create a new BlackWidow project
	generate			Generate a new view component
	render				Compile a project into a servable site
EOF

HELP[:generate] = <<-EOF
EOF

HELP[:new] = <<-EOF
usage: black-widow new [--help] --name <name>

Discription:
	This command generates a project skeleton for you to start your site from.
	The skeleton is populated with the required view component directories, 
	along with a default .black-widow.yaml file.

Options:
	-h, --help			Display this help message
	-n, --name			Required. The name of the new project
EOF

HELP[:render] = <<-EOF
EOF

# :_ key is all unnamed arguments from ARGV
ARGS = { _: [] }
next_arg = :command # First unnamed arg is expected to be a sub command
ARGV.each do |arg|
	case arg
	when '-h', '--help'			then ARGS[:help] 	= true
	when '-v', '--version'		then ARGS[:version] = true
	when '-n', '--name'			then next_arg = :name
		# TODO: Are more args needed?
	else
		if next_arg
			ARGS[next_arg] = arg
			next_arg = nil
		else
			ARGS[:_].push arg
		end
	end
end

if ARGS[:help] || !!ARGV.length
	if ARGS[:command] && HELP.include?(ARGS[:command].to_sym)
		puts HELP[ARGS[:command].to_sym] 
	else
		puts HELP[:base]
	end
	exit 0
end

if ARGS[:version]
	puts BlackWidow::VERSION
	exit 0
end

case ARGS[:command]
# Handle 'new' command
when 'n', 'new'
	unless ARGS[:name]
		puts USAGE_NEW
		exit 1
	end
# Handle 'generate' command
when 'g', 'gen', 'generate'
	type, name, *rest = ARGV{:_}

	if !type || !BlackWidow::VIEW_FOLDERS.include?(type) then
		err('Invalid component type', 2)
	end

	err('You must specify a name.') unless name

	puts "BlackWidow: This feature does not exist yet."
	exit 0
# Handle 'render' command
when 'r', 'render'
	begin
		render_project
	rescue StandardError => e
		err(e, 3)
	end

	exit 0
else
	puts USAGE
	exit 1
end

##
# Creates a new BlackWidow project skeleton
#
# This function creates a new project directory and populates it with a
# config.yaml file and folders for view components.
#
# @param name: String
#		The name of the project. This will also be the name of the project
#		directory.
#
# @return void
#
def init_project name
	root = Pathname.new Dir.pwd
	if (root + name).exist? then
		raise ArgumentError 'Project could not be created; directory already exists.'
	end

	root.mkpath name
	root.join name
	ViewEngine::FOLDERS.each_value do |dir|
		root.mkpath dir
	end
	config = File.new root.join(BlackWidow::CONFIG_FILE_NAME), 'w+'
end

def render_project
	# Project root directory is the directory with the config file
	root = File.dirname BlackWidow::resolve_config
	Dir.chdir root
end

##
# Prints an error message and exits with an error status
#
# @param err: Exception | RuntimeException | StandardErr | String
# 		The error being thrown.
#
# @param status: Number
#		The exit status. Defaults to 1.
#
def err err, status = 1
	err_type = if err.is_a? Error then err.class.name else 'Error' end
	err_msg = err.message || err

	puts "BlackWidow: - #{err.type} #{err_msg}"
	exit status
end

# engine = BlackWidow::ViewEngine.new Pathname.new(Dir.pwd).join 'src'
# puts(engine.render 'index')
